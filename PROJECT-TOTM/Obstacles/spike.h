#pragma once
#define PlayerSize sf::Vector2f(30.f, 30.f)

///////////////////////////////////////////////////
///
/// \brief Class dealing with spikes obstacle
///
///////////////////////////////////////////////////
class spike
{
public:
	
	///////////////////////////////////////////////////
	///
	/// \brief Constructor which initalizes variables and calls all initialization Functions
	/// 
	///////////////////////////////////////////////////
	spike(sf::Vector2u Spike_Position);
	
	///////////////////////////////////////////////////
	///
	/// \brief Function which initializes spikes inside wall
	/// 
	///////////////////////////////////////////////////
	void Initialize_Spike_Wall();
	
	///////////////////////////////////////////////////
	///
	/// \brief Function which initializes spikes that are drawn outside the wall when player activates spikes
	/// 
	///
	///////////////////////////////////////////////////
	void Initialize_Spikes();

	///////////////////////////////////////////////////
	///
	/// \brief Function which checks for player collision and deals with the timing of activating spikes
	///
	///////////////////////////////////////////////////
	void UpdateSpikes(const sf::FloatRect& PlayerRect, float* dt);

	///////////////////////////////////////////////////
	///
	/// \brief Function which draws the spikes
	///
	///////////////////////////////////////////////////
	void RenderSpikes(sf::RenderWindow* Window);

	///////////////////////////////////////////////////
	///
	/// \brief Function which returns whether Player is alive
	///
	///////////////////////////////////////////////////
	bool GetAlive();

private:

	///////////////////////////////////////////////////
	///
	/// \brief Vector2f holding the size of spikes
	///
	///////////////////////////////////////////////////
	sf::Vector2f m_Spike_Position;

	///////////////////////////////////////////////////
	///
	/// \brief Vector2f holding the size of spikes
	///
	///////////////////////////////////////////////////
	sf::Vector2f m_Spike_Size;
	
	///////////////////////////////////////////////////
	///
	/// \brief Vector of Spikes present inside the wall
	///
	///////////////////////////////////////////////////
	std::vector<sf::RectangleShape> m_Spike_Wall;

	///////////////////////////////////////////////////
	///
	/// \brief Vector of Spikes which are rendered when player activates them
	///
	///////////////////////////////////////////////////
	std::vector<sf::RectangleShape> m_Spikes;

	///////////////////////////////////////////////////
	///
	/// \brief FloatRect of Player
	///
	///////////////////////////////////////////////////
	sf::FloatRect m_Player_Rect;

	///////////////////////////////////////////////////
	///
	/// \brief FloatRect of area where spikes are rendered with dimensions same as player's  
	///
	///////////////////////////////////////////////////
	sf::FloatRect m_Spike_Box;

	///////////////////////////////////////////////////
	///
	/// \brief Number of Spikes
	/// 
	///////////////////////////////////////////////////
	int m_Spike_Number;

	///////////////////////////////////////////////////
	///
	/// \brief Variable which holds total time since spikes are activated and is set to zero when spikes are deactivated
	/// 
	///////////////////////////////////////////////////
	float m_Time;

	///////////////////////////////////////////////////
	///
	/// \brief Variable which holds time taken for each frame
	///
	///////////////////////////////////////////////////
	float m_dt;

	///////////////////////////////////////////////////
	///
	/// \brief Bool which is set to true when player collides with spikes
	/// Note spikes are drawn only after a time delay which is after player activates them
	///
	///////////////////////////////////////////////////
	bool m_Spikes_Active;

	///////////////////////////////////////////////////
	///
	/// \brief Bool which indicates when spikes are to be drawn
	///
	///////////////////////////////////////////////////
	bool m_Spikes_Render;

	///////////////////////////////////////////////////
	///
	/// \brief Bool which checks whether player is alive
	///
	///////////////////////////////////////////////////
	bool m_Alive;
};

