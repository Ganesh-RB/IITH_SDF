#ifndef TELEPORTER_H
#define TELEPORTER_H

#include "../player.h"
#include "../asset_holder.h"
#include "Obstacle.h"

class teleporter : public Obstacle
{
private:
	////////////////////////////////////////////////////////////
	/// \brief size of teleporter
	///
	////////////////////////////////////////////////////////////
	float BASE_SIZE;

	////////////////////////////////////////////////////////////
	/// \brief timer for animation
	///
	////////////////////////////////////////////////////////////
	float timer;

	////////////////////////////////////////////////////////////
	/// \brief player reference to player object for which
	/// teleporter works 
	///
	////////////////////////////////////////////////////////////
	player& player_var;

	////////////////////////////////////////////////////////////
	/// \brief asset holder from which textures and files used
	///
	////////////////////////////////////////////////////////////
	asset_holder& m_assets;

	////////////////////////////////////////////////////////////
	/// \brief initializes variables
	///
	////////////////////////////////////////////////////////////
	void init_variables();

	////////////////////////////////////////////////////////////
	/// \brief deals with animations
	///
	////////////////////////////////////////////////////////////
	void anim(float dt);

	////////////////////////////////////////////////////////////
	/// \brief sprites and "active" bools for the two portals 
	///
	////////////////////////////////////////////////////////////
	std::pair< sf::Sprite, bool > portals[2];

	////////////////////////////////////////////////////////////
	/// \brief current frame of spritesheet
	///
	////////////////////////////////////////////////////////////
	sf::IntRect currentframe;

	////////////////////////////////////////////////////////////
	/// \brief points which act as triggers for teleportation
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f triggerpoints[2];
public:
	////////////////////////////////////////////////////////////
	/// \brief constructor
	///
	/// \param _portal1 position of first portal in player-size units
	/// \param _portal2 position of second portal in player-size units
	/// \param _player_var reference to player object to be teleported
	/// \param asset_source pointer to asset class to be used
	///
	////////////////////////////////////////////////////////////
	teleporter(sf::Vector2u portal1, sf::Vector2u portal2, player& _player_var,asset_holder* _assets);

	////////////////////////////////////////////////////////////
	/// \brief destructor
	///
	////////////////////////////////////////////////////////////
	~teleporter();

	////////////////////////////////////////////////////////////
	/// \brief generic update function
	///
	/// serves as container for all other update function/calls
	///
	/// \param _dt delta time value for which frame rate is adjusted
	///
	////////////////////////////////////////////////////////////
	void update(float _dt);

	////////////////////////////////////////////////////////////
	/// \brief generic render function
	///
	/// serves as container for all other render functions/calls.
	///
	/// \param target pointer to window in 
	/// which object is to be rendered
	///
	////////////////////////////////////////////////////////////
	void render(sf::RenderTarget* target);

	const bool isCollide(const sf::FloatRect &shape);

	///////////////////////////////////////////////////
	///	
	///	\brief read the details of pufferfish from the file
	///	
	///	\param fin std::ifstream& file stream
	///	\param data Data& file stream \file Data.h
	///	\param size size_t& file no of inputs to be taken
	///	
	///	
	///////////////////////////////////////////////////
	static void read(std::ifstream &fin, Data &data, size_t &size);

};

#endif