#pragma once
#include <memory>
#include <SFML\Graphics.hpp>
#include "stateman.h"

////////////////////////////////////////////////////////////
/// \struct 
///\brief contains all info needed for state implementation
/// 
/// \param m_states unique ptr to statestack
/// \param m_window unique ptr to a window
///
////////////////////////////////////////////////////////////
struct context
{
	std::unique_ptr<stateman> m_states;
	std::unique_ptr<sf::RenderWindow> m_window;

	context()
	{
		m_states = std::make_unique<stateman>();
		m_window = std::make_unique<sf::RenderWindow>();
	}
};

////////////////////////////////////////////////////////////
/// \brief game class where game states and running happens
///
/// This class mantains the game stack,window and runs
/// the game loop
///
////////////////////////////////////////////////////////////
class game
{
private:
	////////////////////////////////////////////////////////////
	/// \brief context of the game class
	///
	/// This is a shared ptr variable of context struct
	/// which has all variables needed by states to run properly
	////////////////////////////////////////////////////////////
	std::shared_ptr<context> m_context;

public:
	////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	////////////////////////////////////////////////////////////
	game();

	////////////////////////////////////////////////////////////
	/// \brief Destructor
	///
	////////////////////////////////////////////////////////////
	~game();

	////////////////////////////////////////////////////////////
	/// \brief Method to run game loop
	///
	/// This function is used to run the game loop on the state
	/// on top of stack and update statestack.
	/// 
	////////////////////////////////////////////////////////////
	void run();
};

