#pragma once

#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/Audio.hpp>
#include <SFML/Network.hpp>

////////////////////////////////////////////////////////////
/// \brief class dealing with player movement and collision
///
////////////////////////////////////////////////////////////
class player
{
private:
	////////////////////////////////////////////////////////////
    /// \brief used for square shaped player
    ///
    ////////////////////////////////////////////////////////////
	sf::RectangleShape shape;

	////////////////////////////////////////////////////////////
	/// \brief used to initialize variables
	///
	/// sets movementspeed to required value and
	/// sets movement variables moving and move direction to initial values
	///
	////////////////////////////////////////////////////////////
	void initvariables();

	////////////////////////////////////////////////////////////
	/// \brief used to initialize player shape
	///
	/// initializes size and color of player shape
	////////////////////////////////////////////////////////////
	const void initshape();

	////////////////////////////////////////////////////////////
	/// \brief denotes player movement speed
	///
	////////////////////////////////////////////////////////////
	float movementspeed;

	//variables needed for time independent implementation
	////////////////////////////////////////////////////////////
	/// \brief denotes delta time
	///
	////////////////////////////////////////////////////////////
	float dt;

	////////////////////////////////////////////////////////////
	/// \brief denotes frame rate to be acheived
	///
	////////////////////////////////////////////////////////////
	float time_mult;

	//needed to draw trail lines
	////////////////////////////////////////////////////////////
	/// \brief denotes start of the trail being drawn
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f start_trail;

	////////////////////////////////////////////////////////////
	/// \brief denotes end of trail at that moment
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f end_trail;
public:
	//cons and decons
	////////////////////////////////////////////////////////////
	/// \brief constructor
	///
	/// \param _x initial  x coordinate of player
	/// \param _y initial  y coordinate of player
	///
	////////////////////////////////////////////////////////////
	player(float _x=0.f, float _y=0.f);

	////////////////////////////////////////////////////////////
	/// \brief destructor
	///
	////////////////////////////////////////////////////////////
	virtual ~player();

	//movement variables
	////////////////////////////////////////////////////////////
	/// \brief denotes if player moving or not
	///  
	/// false denotes player is stationary and 
	/// true denotes player is moving
	///
	////////////////////////////////////////////////////////////
	bool moving;

	////////////////////////////////////////////////////////////
	/// \brief denotes movement direction
	///
    /// 0 denotes no movement,1 for left,2 for right
	/// 3 for up and 4 for down
	///
	////////////////////////////////////////////////////////////
	int movedirection;

	//returns coord of player object
	////////////////////////////////////////////////////////////
	/// \brief gives player coordinates
	///
	/// \return sf::vector2f showing x and y coordinates of player
	///
	////////////////////////////////////////////////////////////
	sf::Vector2f getcoord();

	//updates input and movement
	////////////////////////////////////////////////////////////
	/// \brief checks input,sets movement,changes start_trail accordingly
	///
	/// this function checks the input to see if movement
	/// key pressed ,changes movement accordingly and
	/// assigns a valid value to start-trail for given movement
	///
	////////////////////////////////////////////////////////////
	void updateinput();

	//checks for window collison 
	////////////////////////////////////////////////////////////
	/// \brief ensures player remains within screen 
	///
	///  checks if player is touching/out of screen and
	/// adjusts it's position and stops movement accordingly 
	///
	/// \param target pointer to window with which bounds is to be checked
	///
	////////////////////////////////////////////////////////////
	void updatewindowcollision(sf::RenderTarget* target);

	////////////////////////////////////////////////////////////
	/// \brief checks for collision with given object 
	///
	///  checks if player is colliding with object and
	/// adjusts it's position and stops movement accordingly
	///
	/// \param target pointer to object with which collision is to be checked
	///
	////////////////////////////////////////////////////////////
	void update_collision(sf::RectangleShape* object);


	//generic update and vender
	////////////////////////////////////////////////////////////
	/// \brief generic update function
	///
	/// serves as container for all other update function/calls
	///
	/// \param target pointer to window in which object present
    /// \param _dt delta time value for which frame rate is adjusted
	/// \param _time_mult targeted value of fps
	/// for which frame rate independence is implemented
	///
	////////////////////////////////////////////////////////////
	void update(sf::RenderTarget* target,float* _dt,float* _time_mult);

	////////////////////////////////////////////////////////////
	/// \brief generic render function
	///
	/// serves as container for all other render functions/calls.
	///
	/// \param target pointer to window in 
	/// which object is to be rendered
	///
	////////////////////////////////////////////////////////////
	void render(sf::RenderTarget* target);

	//vector where all previously made trails are stored
	////////////////////////////////////////////////////////////
	/// \brief storage for all previously drawn trails
	///
	////////////////////////////////////////////////////////////
	std::vector<sf::RectangleShape> trails;

	//shape which is for trail being drawn(if any)
	////////////////////////////////////////////////////////////
	/// \brief returns a trail given 2 points
	/// 
	////////////////////////////////////////////////////////////
	sf::RectangleShape curr_trail(sf::Vector2f* start,sf::Vector2f* end);

	//sets trail end depending on movemenet direction
	////////////////////////////////////////////////////////////
	/// \brief setsend_trail to where end of trail given movement direction
	///
   	///  this function should only be called when movement happening 
	///  will not chnage end_trail variable otherwise
	/// 
	////////////////////////////////////////////////////////////
	void getendtrail(int);
};

